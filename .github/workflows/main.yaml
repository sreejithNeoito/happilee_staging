name: Deploy to EC2
on:
  push:
    branches: [main]
    paths:
      - 'wp-content/themes/**'
  workflow_dispatch:
jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      REMOTE_HOST: ${{ secrets.HOST }}
      REMOTE_USER: ${{ secrets.USERNAME }}
      SSH_PRIVATE_KEY: ${{ secrets.KEY }}
      REMOTE_ROOT: /var/www/happilee_staging
      REMOTE_WP: /var/www/happilee_staging/wp-content
      REMOTE_THEMES: /var/www/happilee_staging/wp-content/themes
      BACKUP_DIR: /var/backups/happilee

    steps:
      - name: Checkout correct ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || github.ref }}
          fetch-depth: 0

      - name: Prepare SSH
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${REMOTE_HOST}" >> ~/.ssh/known_hosts

      - name: Create deploy archive (themes only)
        shell: bash
        run: |
          set -euo pipefail
          test -d "wp-content/themes" || { echo "wp-content/themes not found"; exit 1; }
          DEPLOY_PKG="themes-${GITHUB_SHA}.tar.gz"
          # Archive will contain "themes/" at top-level
          tar -C wp-content -czf "${DEPLOY_PKG}" themes
          echo "DEPLOY_PKG=${DEPLOY_PKG}" >> "$GITHUB_ENV"

      - name: Upload archive via scp
        shell: bash
        run: |
          set -euo pipefail
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            "${{ env.DEPLOY_PKG }}" \
            "${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:/tmp/${{ env.DEPLOY_PKG }}"

      - name: Deploy on remote via ssh
        shell: bash
        run: |
          set -euo pipefail
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            "${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}" \
            DEPLOY_PKG="${{ env.DEPLOY_PKG }}" REMOTE_ROOT="${{ env.REMOTE_ROOT }}" REMOTE_WP="${{ env.REMOTE_WP }}" REMOTE_THEMES="${{ env.REMOTE_THEMES }}" BACKUP_DIR="${{ env.BACKUP_DIR }}" 'bash -s' << 'REMOTE_EOF'
          set -euo pipefail

          TS="$(date +%Y%m%d_%H%M%S)"
          PKG="/tmp/${DEPLOY_PKG}"

          echo "üöÄ Starting WordPress themes deployment on $(hostname)"
          echo "üì¶ Package: ${PKG}"

          # Sanity checks
          test -f "${PKG}" || { echo "Archive not found at ${PKG}"; exit 1; }
          sudo mkdir -p "${REMOTE_THEMES}" "${BACKUP_DIR}"

          echo "üóÑÔ∏è Backing up current themes -> ${BACKUP_DIR}/themes-${TS}.tar.gz"
          # Back up the entire themes dir (ok if empty)
          sudo tar -czf "${BACKUP_DIR}/themes-${TS}.tar.gz" -C "${REMOTE_WP}" themes || true
          sudo ls -lh "${BACKUP_DIR}/themes-${TS}.tar.gz" || true

          echo "üì§ Extracting new themes into ${REMOTE_WP}"
          # Extract (overwrites/updates files that changed; preserves others)
          sudo tar -xzf "${PKG}" -C "${REMOTE_WP}"

          echo "üîí Fixing ownership/permissions..."
          if id www-data &>/dev/null; then
            sudo chown -R www-data:www-data "${REMOTE_THEMES}"
          fi
          sudo chmod -R 755 "${REMOTE_ROOT}"
          sudo chmod -R 775 "${REMOTE_WP}/uploads" 2>/dev/null || true

          echo "üîÑ Reloading services..."
          sudo systemctl reload nginx || sudo systemctl restart nginx
          if systemctl list-units --type=service | grep -q php8.1-fpm; then
            sudo systemctl restart php8.1-fpm
          elif systemctl list-units --type=service | grep -q php8.2-fpm; then
            sudo systemctl restart php8.2-fpm
          else
            echo "‚ö†Ô∏è PHP-FPM service not found (php8.1-fpm/php8.2-fpm). Skipping."
          fi

          echo "üßπ Cleaning up package..."
          sudo rm -f "${PKG}"

          echo "üéâ Deployment completed successfully!"
          REMOTE_EOF

      - name: Summary
        shell: bash
        run: |
          echo "Deployed $GITHUB_SHA"
          echo "Archive: ${{ env.DEPLOY_PKG }}"
          echo "Remote:  ${{ env.REMOTE_HOST }}:${{ env.REMOTE_THEMES }}"
